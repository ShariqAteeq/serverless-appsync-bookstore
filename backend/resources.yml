BooksTable:
  Type: AWS::DynamoDB::Table
  Properties: 
    AttributeDefinitions: 
      - AttributeName: "bookId"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema: 
      - AttributeName: "bookId"
        KeyType: "HASH"
    TableName: Books
    Tags: 
      - Key: Name
        Value: books-table

OrdersTable:
  Type: AWS::DynamoDB::Table
  Properties: 
    AttributeDefinitions: 
      - AttributeName: "orderId"
        AttributeType: "S"
      - AttributeName: "bookId"
        AttributeType: "S"
      - AttributeName: "userId"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    GlobalSecondaryIndexes: 
      - IndexName: "byOrder"
        KeySchema: 
          - AttributeName: "bookId"
            KeyType: "HASH"
          - AttributeName: "createdAt"
            KeyType: "RANGE"
        Projection: 
          ProjectionType: ALL
    KeySchema: 
      - AttributeName: "userId"
        KeyType: "HASH"
      - AttributeName: "orderId"
        KeyType: "RANGE"
    TableName: Orders
    Tags: 
      - Key: Name
        Value: orders-table

cognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:
    UsernameAttributes: 
      - email
    UserPoolName: "BookStore"

cognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: web
    UserPoolId: !Ref cognitoUserPool 

cognitoAdminGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties: 
    Description: "Admin Belongs to this group"
    GroupName: "Admin"
    Precedence: 0
    RoleArn: !GetAtt cognitoAdminIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

cognitoAdminIAMRole:
  Type: AWS::IAM::Role
  Properties: 
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Description: "IAM role for admin user"
    Policies: 
      - PolicyName: "admin-group-role-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:*'
              Resource:
                - !GetAtt BooksTable.Arn 
                - !GetAtt OrdersTable.Arn 
    RoleName: "book-store-admin-role"

cognitoCustomerGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties: 
    Description: "Customer Belongs to this group"
    GroupName: "Customer"
    Precedence: 0
    RoleArn: !GetAtt cognitoCustomerIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

cognitoCustomerIAMRole:
  Type: AWS::IAM::Role
  Properties: 
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Description: "IAM role for Customer user"
    Policies: 
      - PolicyName: "customer-group-role-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:*'
              Resource:
                - !GetAtt OrdersTable.Arn 
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
                - 'dynamodb:BatchGetItem'
              Resource:
                - !GetAtt BooksTable.Arn 
    RoleName: "book-store-customer-role"

